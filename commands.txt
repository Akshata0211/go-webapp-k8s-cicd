Install kubectl, eksctl, aws cli, helm in system
helm install go-web-app ./go-web-app-chart
copy k8s/manifests to go-web-app-chart/templates folders and make chng for ci to edit docker img tag
helm uninstall go-web-app

#Install a EKS cluster with EKSCTL
eksctl create cluster --name demo-cluster --region us-east-1 
eksctl delete cluster --name demo-cluster --region us-east-1 

Install Nginx Ingress Controller on AWS
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.11.1/deploy/static/provider/aws/deploy.yaml
kubectl get pods -n ingress-nginx

mapped domain to ing ip in /etc/hosts in local system and terminal also.
edit security grp of ec2 instace , add nodeport ip to allow all traffic
then can access website on eks_node_external_ip:nodeport_ip for testing

kubectl get nodes -o wide
kubectl apply -f k8s/manifests/
kubectl get all / ing
kubectl delete all --all

Install Argo CD using manifests
kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

Access the Argo CD UI (Loadbalancer service)
kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
kubectl patch svc argocd-server -n argocd -p '{\"spec\": {\"type\": \"LoadBalancer\"}}'

Get the Loadbalancer service IP
kubectl get svc argocd-server -n argocd

kubectl get secrets -n argocd
kubectl edit secret argocd-initial-admin-secret -n argocd
echo password | base64 --decode

after login, create project
sync policy : automatic, select self-heal
in source add repo , give path - helm/go-web-app-chart to implement data when cicd runs




